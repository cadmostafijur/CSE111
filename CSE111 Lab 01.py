# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KxPmZuUvs5-3wdLLdQDbPM5xClbW66zy
"""

user=input()
up_count=0
lo_count=0
for i in user:
    if i.islower():
        lo_count+=1
    else:
        up_count+=1
if up_count>lo_count:
    print(user.upper())
else:
    print(user.lower())

import string
user=input()
char_count=0
num="0123456789"
num_count=0
for i in user:
  if i in string.ascii_letters:
    char_count+=1
  else:
    num_count+=1
if num_count==0:
  print("WORD")
elif num_count<len(user):
  print("MIXED")
else:
  print("NUMBER")

import string
user=input()
up_count=0
for i in user:
  if i in string.ascii_uppercase:
    up_count+=1
if up_count==2:
  for i in user:
    if i.isupper():
      first=user.find(i)
      new_str=user.replace(i,i.lower())
      break

  for i in new_str:
    if i.isupper():
     end_game=user.find(i)
     break
  var=user[f+1:end_game]
  if var!="":
    print(var)
  else:
    print("BLANK")

user=input().split(",")
new_str=""
if len(user[0])<len(user[1]):
  match_str=user[1]
  str_vchar=user[0]
else:
  match_str=user[0]
  str_vchar=user[1]
for i in  str_vchar:
  if i in match_str:
    new_str+=i
for i in match_str:
  if i in str_vchar:
    new_str+=i
if new_str=="":
  print("Nothing is common")
else:
  print(new_str)

#Task5

def special_character(char):
    sp_char = "_$#@"
    if char in sp_char:
        return True
    else:
        return False


def user_password(password):
    lo_count = sum(map(str.islower, password))
    up_count = sum(map(str.isupper, password))
    num_count = sum(map(str.isdigit, password))
    sp_count = sum(map(special_character, password))
    comment = ""
    if lo_count == 0:
        comment = "Lowercase Chracter Missing"

    if up_count == 0:
        if comment != "":
            comment += ", "
        comment += "Uppercase Chracter Missing"

    if num_count == 0:
        if comment != "":
            comment += ", "
        comment += "Digit Missing"

    if sp_count == 0:
        if comment != "":
            comment += ", "
        comment += "Special Chracter Missing"

    if comment == "":
        print("OK")
    else:
      print(comment)
        
word = input()
user_password(word)

"""**List**"""

"""first take a emty list then while true condtion user input
if user input stop then the condtion break and all input append
in list then i use for loop and calll all the vale of list and count the number
another condition in for loop so we need a emty list and
the condtion is id x not i done then append in done list 
and print( print(x, '-', count , 'times')) """

lit=[]
while True:
  user=input()
  if user.upper()=="STOP":
    break
  lit.append(user)
done=[]
for x in lit:
  count = lit.count(x)
  if x not in done:
    done.append(x)
    print(x, '-', count , 'times')

""" first of all n input and for i in range(n) then sum t """
hi=-0
n=int(input())
lit=[]
for i in range(n):
  user=input().split()
  sum=0
  for k in range(len(user)):
    sum+=int(user[k])
  if sum>hi:
    hi=sum
    lit=user
print(hi)
print(lit)

#List Task 2


max_sum = 0
listmax_sum = []

user = int(input())

for i in range(user):
  initi_list = input().split()
  initi_max_sum = 0

  for item in initi_list:
    initi_max_sum +=int(item)

  if initi_max_sum > max_sum:
    max_sum = initi_max_sum
    listmax_sum = initi_list.copy()

print("{}\n{}".format(max_sum,listmax_sum))

def ub_j(lit):
    num_list = [num for num in range(1, len(lit))]
    abs_list = []

    for i in range(len(lit) - 1):
        elem = lit[i] - lit[i + 1]
        elem = abs(elem)
        abs_list.append(elem)

    if sorted(num_list) == sorted(abs_list):
        return True
    else:
        return False
user_input = input()
result = []
while user_input.upper() != "STOP":
    lit = [int(num) for num in user_input.split()]

    if ub_j(lit):
        result.append("UB Jumper")
    else:
        result.append("Not UB Jumper")

    user_input = input()

for output in result:
    print(output)

elig_count=0 #eligible_count 
user=input()
x=int(user[0])
print(x)
y=int(user[-1])
print(y)
user=input().split()
for i in user:
  if int(i)+y<=5:
    elig_count+=1
print(elig_count//3)

eli_count=0
user=input()
x=int(user[0])
y=int(user[-1])
user=input().split()
for i in user:
  if int(i)+y<=5:
    eli_count+=1
print(eli_count//3)

"""**Dictionary & Tuple**"""

dic_1=input().split(",")
dic_2=input().split(",")#f_dic = final dic
f_dic={}
for i in dic_1:
  i=i.split(": ")
  f_dic[i[0]]=int(i[1])
for i in dic_2:
  i=i.split(": ")
  if i[0] not in  f_dic.keys():
    f_dic[i[0]] = int(i[1])
  else:
    f_dic[i[0]]+= int(i[1])

dic_tmpvalu = []
for i in f_dic.values():
  if i not in dic_tmpvalu:
    dic_tmpvalu.append(i)

dict_values = tuple(sorted(dic_tmpvalu))
print("{}\nValues: {}".format(f_dic, dict_values))

dic={}
while True:
  user=input()
  if user.upper()=="STOP":
    break
  else:
    dic[user]=dic.get(user,0)+1
  """print(dic)
dic.append(user)
done={}
for x in dic:
  count = dic.count(x)
  if x not in done:
    done.append(x)
    print(x, '-', count , 'times')"""
for i,j in dic.items():
  print(i, '-', j , 'times')

dic_revs={}
user=input().split(",")
for i in user:
  i=i.split(":")
  dic_revs[i[1]]=dic_revs.get(i[1],[])
  dic_revs[i[1]].append(i[0])
print(dic_revs)

phone_valukey={".":1,",":11,"?":111,"!":1111,":":11111,"A":2,"a":2,"B":22,"b":22,
               "C":222,"c":222,"D":3,"d":3,"E":33,"e":33,"F":333,"f":333,"G":4,"g":4,
               "H":44,"h":44,"I":444,"i":444,"J":5,"j":5,"K":55,"k":55,"L":555,"l":555,
 "M":6,"m":6,"N":66,"n":66,"O":666,"o":666,"P":7,"p":7,"Q":77,"q":77,"R":777,"r":777,"S":7777,"s":7777,"T":8,"t":8,
 "U":88,"u":88,"V":888,"v":888,"W":9,"w":9,"X":99,"x":99,"y":999,"Y":999,"Z":9999,"z":9999," ":0}
user = input("Enter Input: ")

for i in user:
    x = phone_valukey.get(i)
    print(x,end='')

password=input()
lo_count = sum(map(str.islower, password))
print(lo_count)



"""**Function**"""

height, weight=map(int,input().split(","))
height =height/ 100
bmi =  (weight/ height**2)
if (bmi > 30 ):
  print("Score is {:.1f}. You are Obese".format(bmi))
elif (bmi >=25 and bmi <=30):
  print("Score is {:.1f}. You are Overweight".format(bmi))
elif (bmi >=18.5 and bmi <=24.9):
  print("Score is {:.1f}. You are Normal".format(bmi))
else:
  print("Score is {:.1f}. You are Underweight".format(bmi))

def bmi_chk(height, weight):
  height = height / 100 
  BMI = weight / height ** 2

  if BMI < 18.5:
      comnt = "Underweight"
  elif BMI >= 18.5 and BMI <= 24.9:
      comnt = "Normal"
  elif BMI >= 25 and BMI <= 30:
      comnt = "Overweight"
  elif BMI > 30:
      comnt = "Obese"

  return f"Score is {BMI:.1f}. You are {comnt}"


height, weight=map(int,input().split(","))
print(bmi_chk(height, weight))

def div_sum(min, max, div):
  if div != 0:
    return sum(num for num in range(min, max) if num % div == 0)
  else:
      return "Divisor cannot be 0."
min, max, div=map(int,input().split(","))
print(div_sum(min, max, div))

def div_sum(min, max, div):
  if div != 0:
    sum=0
    for i in range(min,max):
      if i%div==0:
        sum+=i
    return sum
  else:
      return "Divisor cannot be 0."
min, max, div=map(int,input().split(","))
print(div_sum(min, max, div))

def FoodPanda(food, Location="Mohakhali"):
  if Location != "Mohakhali":
        del_charge = 60
  else:
        del_charge = 40

  if food == "BBQ Chicken Chesse Burger":
        Meal_Cost = 250
  elif food == "Beef Burger":
        Meal_Cost = 170
  elif food == "Naga Drums":
        Meal_Cost = 200
  else:
        return "The food is not on the Menu."

  Tax = Meal_Cost * (8 / 100)

  Total_Price = Meal_Cost + del_charge + Tax
  return Total_Price
print(FoodPanda("Beef Burger", "Dhanmondi"))
print(FoodPanda("Beef Burger"))

def chillox(food,location="mohakali"):
  item={BBQ Chicken Cheese Burger:250,Beef Burger:170,Naga Drums:200}
  delivary_charge=0
  if location=="mohakali":
    delivary_charge+=40
  else:
    delivary_charge+=60
  if food=="BBQ Chicken Cheese Burger":
    cost=250
  elif food=="Beef Burger":
    cost=170
  elif food=="Naga Drum"

#task4
def replace_domain(email, domain, old_domain="kaaj.com"):
  new_email = ""
  index = -1
  for char in range(len(email)):
        if email[char] == "@":
            index = char
            break

  if index == -1:
        return "Incorrect E-Mail Adress!"

  new_email = email[: index + 1]

  if old_domain in email:
        new_email += domain
        comment = "Changed"
  else:
        new_email += domain
        comment = "Unchanged"

  return f"{comment}: {new_email}"


print(replace_domain("alice@kaaj.com", "sheba.xyz", "kaaj.com"))
print(replace_domain("bob@sheba.xyz", "sheba.xyz"))
print(replace_domain("bobsheba.xyz", "sheba.xyz"))



#task5
def palindrome(word):
  string = ""
  for char in word:
        if char != " ":
            string += char
  if string == string[::-1]:
        print("Palindrome")
  else:
        print("Not a palindrome")


word = input().lower()
palindrome(word)

#task6

